
Our class can also include our own methods.  Below, formatCount() will use the ternary operator to print "Begin Game" if state.count = 0, else it will display the count:  

```javascript
  formatCount() {
    const { count } = this.state;
    return count === 0 
        ? "Begin Game" : count;
  }
```

In the above snippet, we "destructure" the state count.  That is, we create a new variable based on the key of an object.  So above, instead of referencing this.state.count, we only have to reference "state". 

the reference to the this.state.count is destructured down to count.  Then, a ternary operator is used to return the words "Begin Game" if count is 0, or the actual count if it is not zero.

In this same snippet, we could use a tag instead of a string: 

```javascript
return count === 0 ? <h1>Zero</h1> : count;
```

Finally, in order to show this, we would replace our former <span> tag with this one, which would activate the method: 

```javascript
<span> {this.formatCount()} </span>
```
